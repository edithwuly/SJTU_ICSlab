/*
 * proxy.c - ICS Web proxy
 *
 *
 */

#include "csapp.h"
#include <stdarg.h>
#include <sys/select.h>
#include <stdlib.h>

/*
 * Function prototypes
 */
int parse_uri(char *uri, char *target_addr, char *path, char *port);
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr, char *uri, size_t size);

sem_t mutex1, mutex2;

struct clientInfo{
    int id;
    int connfd;
    struct sockaddr_storage clientaddr;
};


void Rio_writen_w(int fd, void *usrbuf, size_t n) 
{
    if (rio_writen(fd, usrbuf, n) != n) {
        printf("Rio_writen error");
    }
}

ssize_t Rio_readlineb_w(rio_t *rp, void *usrbuf, size_t maxlen) 
{
    ssize_t rc;

    if ((rc = rio_readlineb(rp, usrbuf, maxlen)) < 0) {
        printf("Rio_readlineb error");
	return 0;
    }
    return rc;
}

ssize_t Rio_readnb_w(rio_t *rp, void *usrbuf, size_t maxlen) 
{
    ssize_t rc;

    if ((rc = rio_readnb(rp, usrbuf, maxlen)) < 0) {
        printf("Rio_readnb error");
	return 0;
    }
    return rc;
}

void *thread(void *client) {
    Pthread_detach(pthread_self());
    doit(client);
    return NULL;
}

void doit(struct clientInfo * client)
{
    int connfd = client->connfd,ccount=0,scount=0,sum=0;
    size_t n;
    int clientfd;
    char buf[MAXLINE],uri[3*MAXLINE],hostname[MAXLINE],pathname[MAXLINE],port[MAXLINE],method[MAXLINE],version[MAXLINE],logstring[MAXLINE];
    rio_t rio_connfd,rio_clientfd;

    rio_readinitb(&rio_connfd, connfd);
    Rio_readlineb_w(&rio_connfd, buf, MAXLINE);
    sscanf(buf, "%s %s %s", method, uri, version);
    parse_uri(uri,hostname,pathname,port);
    /*printf("mathod:%s\nuri:%s\nversion:%s\nhostname:%s\npathname:%s\nport:%s\n",method,uri,version,hostname,pathname,port);*/

    strcpy(buf,method);
    strcat(buf," /");
    strcat(buf,pathname);
    strcat(buf," ");
    strcat(buf,version);
    strcat(buf,"\r\n");

    while ((clientfd = open_clientfd(hostname,port))==-1);
    
    Rio_writen_w(clientfd, buf, strlen(buf));
    while((n = Rio_readlineb_w(&rio_connfd, buf, MAXLINE)) != 0){
	Rio_writen_w(clientfd, buf, strlen(buf));
	if (!strcmp(buf,"\r\n"))
            break;
	if (!strncmp("Content-Length: ", buf, 16))
	    sscanf(&buf[16], "%d", &ccount);
    }
    Rio_readnb_w(&rio_connfd,buf,ccount);
    Rio_writen_w(clientfd,buf,ccount);

    rio_readinitb(&rio_clientfd, clientfd);
    while ((n = Rio_readlineb_w(&rio_clientfd, buf, MAXLINE)) > 0){
	sum+=n;
	Rio_writen_w(connfd, buf, strlen(buf));
	if (!strcmp(buf,"\r\n"))
	    break;
	if (!strncmp("Content-Length: ", buf, 16))
	    sscanf(&buf[16], "%d", &scount);
    }
    sum+=scount;
    Rio_readnb_w(&rio_clientfd,buf,scount);
    Rio_writen_w(connfd,buf,scount);
    close(clientfd);
    //P(&mutex1);
    format_log_entry(logstring, &(client->clientaddr),uri,sum);
    printf("%s\n",logstring);
    //V(&mutex1);
    close(connfd);
    free(client);
    return;
}

/*
 * main - Main routine for the proxy program
 */
int main(int argc, char **argv)
{
    int listenfd;
    socklen_t clientlen;
    pthread_t tid;
    struct clientInfo *client;
    int id=0;

    Signal(SIGPIPE, SIG_IGN);

    //Sem_init(&mutex1, 0, 1);
    //Sem_init(&mutex2, 0, 1);

    /* Check arguments */
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <port number>\n", argv[0]);
        exit(0);
    }

    listenfd = open_listenfd(argv[1]);
    while(1){
	clientlen = sizeof(struct sockaddr_storage);
	client = Malloc(sizeof(struct clientInfo));
	client->connfd = Accept(listenfd, (SA *)&(client->clientaddr), &clientlen);
	id++;
	client->id = id;
	doit(client);
	//pthread_create(&tid, NULL, thread, client);
    }
    exit(0);  
}



/*
 * parse_uri - URI parser
 *
 * Given a URI from an HTTP proxy GET request (i.e., a URL), extract
 * the host name, path name, and port.  The memory for hostname and
 * pathname must already be allocated and should be at least MAXLINE
 * bytes. Return -1 if there are any problems.
 */
int parse_uri(char *uri, char *hostname, char *pathname, char *port)
{
    char *hostbegin;
    char *hostend;
    char *pathbegin;
    int len;

    if (strncasecmp(uri, "http://", 7) != 0) {
        hostname[0] = '\0';
        return -1;
    }

    /* Extract the host name */
    hostbegin = uri + 7;
    hostend = strpbrk(hostbegin, " :/\r\n\0");
    if (hostend == NULL)
        return -1;
    len = hostend - hostbegin;
    strncpy(hostname, hostbegin, len);
    hostname[len] = '\0';

    /* Extract the port number */
    if (*hostend == ':') {
        char *p = hostend + 1;
        while (isdigit(*p))
            *port++ = *p++;
        *port = '\0';
    } else {
        strcpy(port, "80");
    }

    /* Extract the path */
    pathbegin = strchr(hostbegin, '/');
    if (pathbegin == NULL) {
        pathname[0] = '\0';
    }
    else {
        pathbegin++;
        strcpy(pathname, pathbegin);
    }

    return 0;
}

/*
 * format_log_entry - Create a formatted log entry in logstring.
 *
 * The inputs are the socket address of the requesting client
 * (sockaddr), the URI from the request (uri), the number of bytes
 * from the server (size).
 */
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr,
                      char *uri, size_t size)
{
    time_t now;
    char time_str[MAXLINE];
    unsigned long host;
    unsigned char a, b, c, d;

    /* Get a formatted time string */
    now = time(NULL);
    strftime(time_str, MAXLINE, "%a %d %b %Y %H:%M:%S %Z", localtime(&now));

    /*
     * Convert the IP address in network byte order to dotted decimal
     * form. Note that we could have used inet_ntoa, but chose not to
     * because inet_ntoa is a Class 3 thread unsafe function that
     * returns a pointer to a static variable (Ch 12, CS:APP).
     */
    host = ntohl(sockaddr->sin_addr.s_addr);
    a = host >> 24;
    b = (host >> 16) & 0xff;
    c = (host >> 8) & 0xff;
    d = host & 0xff;

    /* Return the formatted log entry string */
    sprintf(logstring, "%s: %d.%d.%d.%d %s %zu", time_str, a, b, c, d, uri, size);
}


